/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef CA_CENTER_H
#define CA_CENTER_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "ca_ca_types.h"

/* Center service interface */
typedef struct _caCenterIf caCenterIf;  /* dummy object */

struct _caCenterIfInterface
{
  GTypeInterface parent;

  gboolean (*casetup) (caCenterIf *iface, caCAParamter ** _return, const gint32 N, const gint32 bytesize, GError **error);
  gboolean (*user_register) (caCenterIf *iface, caUserRegister ** _return, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError **error);
  gboolean (*cakeygen) (caCenterIf *iface, caURevoKey ** _return, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError **error);
};
typedef struct _caCenterIfInterface caCenterIfInterface;

GType ca_center_if_get_type (void);
#define CA_TYPE_CENTER_IF (ca_center_if_get_type())
#define CA_CENTER_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CA_TYPE_CENTER_IF, caCenterIf))
#define CA_IS_CENTER_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CA_TYPE_CENTER_IF))
#define CA_CENTER_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), CA_TYPE_CENTER_IF, caCenterIfInterface))

gboolean ca_center_if_casetup (caCenterIf *iface, caCAParamter ** _return, const gint32 N, const gint32 bytesize, GError **error);
gboolean ca_center_if_user_register (caCenterIf *iface, caUserRegister ** _return, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError **error);
gboolean ca_center_if_cakeygen (caCenterIf *iface, caURevoKey ** _return, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError **error);

/* Center service client */
struct _caCenterClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _caCenterClient caCenterClient;

struct _caCenterClientClass
{
  GObjectClass parent;
};
typedef struct _caCenterClientClass caCenterClientClass;

GType ca_center_client_get_type (void);
#define CA_TYPE_CENTER_CLIENT (ca_center_client_get_type())
#define CA_CENTER_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CA_TYPE_CENTER_CLIENT, caCenterClient))
#define CA_CENTER_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), CA_TYPE_CENTER_CLIENT, caCenterClientClass))
#define CA_CENTER_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CA_TYPE_CENTER_CLIENT))
#define CA_CENTER_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), CA_TYPE_CENTER_CLIENT))
#define CA_CENTER_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CA_TYPE_CENTER_CLIENT, caCenterClientClass))

gboolean ca_center_client_casetup (caCenterIf * iface, caCAParamter ** _return, const gint32 N, const gint32 bytesize, GError ** error);
gboolean ca_center_client_send_casetup (caCenterIf * iface, const gint32 N, const gint32 bytesize, GError ** error);
gboolean ca_center_client_recv_casetup (caCenterIf * iface, caCAParamter ** _return, GError ** error);
gboolean ca_center_client_user_register (caCenterIf * iface, caUserRegister ** _return, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError ** error);
gboolean ca_center_client_send_user_register (caCenterIf * iface, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError ** error);
gboolean ca_center_client_recv_user_register (caCenterIf * iface, caUserRegister ** _return, GError ** error);
gboolean ca_center_client_cakeygen (caCenterIf * iface, caURevoKey ** _return, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError ** error);
gboolean ca_center_client_send_cakeygen (caCenterIf * iface, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError ** error);
gboolean ca_center_client_recv_cakeygen (caCenterIf * iface, caURevoKey ** _return, GError ** error);
void center_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void center_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* Center handler (abstract base class) */
struct _caCenterHandler
{
  GObject parent;
};
typedef struct _caCenterHandler caCenterHandler;

struct _caCenterHandlerClass
{
  GObjectClass parent;

  gboolean (*casetup) (caCenterIf *iface, caCAParamter ** _return, const gint32 N, const gint32 bytesize, GError **error);
  gboolean (*user_register) (caCenterIf *iface, caUserRegister ** _return, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError **error);
  gboolean (*cakeygen) (caCenterIf *iface, caURevoKey ** _return, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError **error);
};
typedef struct _caCenterHandlerClass caCenterHandlerClass;

GType ca_center_handler_get_type (void);
#define CA_TYPE_CENTER_HANDLER (ca_center_handler_get_type())
#define CA_CENTER_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CA_TYPE_CENTER_HANDLER, caCenterHandler))
#define CA_IS_CENTER_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CA_TYPE_CENTER_HANDLER))
#define CA_CENTER_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), CA_TYPE_CENTER_HANDLER, caCenterHandlerClass))
#define CA_IS_CENTER_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), CA_TYPE_CENTER_HANDLER))
#define CA_CENTER_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CA_TYPE_CENTER_HANDLER, caCenterHandlerClass))

gboolean ca_center_handler_casetup (caCenterIf *iface, caCAParamter ** _return, const gint32 N, const gint32 bytesize, GError **error);
gboolean ca_center_handler_user_register (caCenterIf *iface, caUserRegister ** _return, const GByteArray * pub, const gchar * uid, const GPtrArray * attributes, GError **error);
gboolean ca_center_handler_cakeygen (caCenterIf *iface, caURevoKey ** _return, const caCAParamter * param, const GPtrArray * attributes, const gint32 uid, GError **error);

/* Center processor */
struct _caCenterProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  caCenterHandler *handler;
  GHashTable *process_map;
};
typedef struct _caCenterProcessor caCenterProcessor;

struct _caCenterProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _caCenterProcessorClass caCenterProcessorClass;

GType ca_center_processor_get_type (void);
#define CA_TYPE_CENTER_PROCESSOR (ca_center_processor_get_type())
#define CA_CENTER_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), CA_TYPE_CENTER_PROCESSOR, caCenterProcessor))
#define CA_IS_CENTER_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), CA_TYPE_CENTER_PROCESSOR))
#define CA_CENTER_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), CA_TYPE_CENTER_PROCESSOR, caCenterProcessorClass))
#define CA_IS_CENTER_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), CA_TYPE_CENTER_PROCESSOR))
#define CA_CENTER_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), CA_TYPE_CENTER_PROCESSOR, caCenterProcessorClass))

#endif /* CA_CENTER_H */
