/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef USER_USER_H
#define USER_USER_H

#include <thrift/c_glib/processor/thrift_dispatch_processor.h>

#include "user_user_types.h"

/* User service interface */
typedef struct _userUserIf userUserIf;  /* dummy object */

struct _userUserIfInterface
{
  GTypeInterface parent;

  gboolean (*encrypt) (userUserIf *iface, GByteArray ** _return, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError **error);
  gboolean (*decrypt) (userUserIf *iface, GByteArray ** _return, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError **error);
};
typedef struct _userUserIfInterface userUserIfInterface;

GType user_user_if_get_type (void);
#define USER_TYPE_USER_IF (user_user_if_get_type())
#define USER_USER_IF(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), USER_TYPE_USER_IF, userUserIf))
#define USER_IS_USER_IF(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), USER_TYPE_USER_IF))
#define USER_USER_IF_GET_INTERFACE(inst) (G_TYPE_INSTANCE_GET_INTERFACE ((inst), USER_TYPE_USER_IF, userUserIfInterface))

gboolean user_user_if_encrypt (userUserIf *iface, GByteArray ** _return, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError **error);
gboolean user_user_if_decrypt (userUserIf *iface, GByteArray ** _return, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError **error);

/* User service client */
struct _userUserClient
{
  GObject parent;

  ThriftProtocol *input_protocol;
  ThriftProtocol *output_protocol;
};
typedef struct _userUserClient userUserClient;

struct _userUserClientClass
{
  GObjectClass parent;
};
typedef struct _userUserClientClass userUserClientClass;

GType user_user_client_get_type (void);
#define USER_TYPE_USER_CLIENT (user_user_client_get_type())
#define USER_USER_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), USER_TYPE_USER_CLIENT, userUserClient))
#define USER_USER_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), USER_TYPE_USER_CLIENT, userUserClientClass))
#define USER_USER_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), USER_TYPE_USER_CLIENT))
#define USER_USER_IS_CLIENT_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), USER_TYPE_USER_CLIENT))
#define USER_USER_CLIENT_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), USER_TYPE_USER_CLIENT, userUserClientClass))

gboolean user_user_client_encrypt (userUserIf * iface, GByteArray ** _return, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError ** error);
gboolean user_user_client_send_encrypt (userUserIf * iface, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError ** error);
gboolean user_user_client_recv_encrypt (userUserIf * iface, GByteArray ** _return, GError ** error);
gboolean user_user_client_decrypt (userUserIf * iface, GByteArray ** _return, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError ** error);
gboolean user_user_client_send_decrypt (userUserIf * iface, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError ** error);
gboolean user_user_client_recv_decrypt (userUserIf * iface, GByteArray ** _return, GError ** error);
void user_client_set_property (GObject *object, guint property_id, const GValue *value, GParamSpec *pspec);
void user_client_get_property (GObject *object, guint property_id, GValue *value, GParamSpec *pspec);

/* User handler (abstract base class) */
struct _userUserHandler
{
  GObject parent;
};
typedef struct _userUserHandler userUserHandler;

struct _userUserHandlerClass
{
  GObjectClass parent;

  gboolean (*encrypt) (userUserIf *iface, GByteArray ** _return, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError **error);
  gboolean (*decrypt) (userUserIf *iface, GByteArray ** _return, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError **error);
};
typedef struct _userUserHandlerClass userUserHandlerClass;

GType user_user_handler_get_type (void);
#define USER_TYPE_USER_HANDLER (user_user_handler_get_type())
#define USER_USER_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), USER_TYPE_USER_HANDLER, userUserHandler))
#define USER_IS_USER_HANDLER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), USER_TYPE_USER_HANDLER))
#define USER_USER_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), USER_TYPE_USER_HANDLER, userUserHandlerClass))
#define USER_IS_USER_HANDLER_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), USER_TYPE_USER_HANDLER))
#define USER_USER_HANDLER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), USER_TYPE_USER_HANDLER, userUserHandlerClass))

gboolean user_user_handler_encrypt (userUserIf *iface, GByteArray ** _return, const GByteArray * pub, const GPtrArray * attr_pks, const gchar * policy, const GArray * revo_list, const gint32 uindex, const GByteArray * mes, GError **error);
gboolean user_user_handler_decrypt (userUserIf *iface, GByteArray ** _return, const GByteArray * cph, const GByteArray * pub, const userUserPrvKey * prv, GError **error);

/* User processor */
struct _userUserProcessor
{
  ThriftDispatchProcessor parent;

  /* protected */
  userUserHandler *handler;
  GHashTable *process_map;
};
typedef struct _userUserProcessor userUserProcessor;

struct _userUserProcessorClass
{
  ThriftDispatchProcessorClass parent;

  /* protected */
  gboolean (*dispatch_call) (ThriftDispatchProcessor *processor,
                             ThriftProtocol *in,
                             ThriftProtocol *out,
                             gchar *fname,
                             gint32 seqid,
                             GError **error);
};
typedef struct _userUserProcessorClass userUserProcessorClass;

GType user_user_processor_get_type (void);
#define USER_TYPE_USER_PROCESSOR (user_user_processor_get_type())
#define USER_USER_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), USER_TYPE_USER_PROCESSOR, userUserProcessor))
#define USER_IS_USER_PROCESSOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), USER_TYPE_USER_PROCESSOR))
#define USER_USER_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_CAST ((c), USER_TYPE_USER_PROCESSOR, userUserProcessorClass))
#define USER_IS_USER_PROCESSOR_CLASS(c) (G_TYPE_CHECK_CLASS_TYPE ((c), USER_TYPE_USER_PROCESSOR))
#define USER_USER_PROCESSOR_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), USER_TYPE_USER_PROCESSOR, userUserProcessorClass))

#endif /* USER_USER_H */
